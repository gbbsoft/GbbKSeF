// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using KSeFAPI.Models;

namespace KSeFAPI
{
    internal partial class KSeFRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        public string OurSessionToken; // session token for header of almost all functions
        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of KSeFRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public KSeFRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = default)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri(HostOptions.HttpsKsefMfGovPlApi.ToString());
        }

        internal HttpMessage CreateCommonInvoiceKsefRequest(InvoiceRequestKSeF body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/common/Invoice/KSeF", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Pobranie faktury z repozytorium KSeF na podstawie kryteriów opartych o numer KSeF. </summary>
        /// <param name="body"> The InvoiceRequestKSeF to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<ExceptionResponse>> CommonInvoiceKsefAsync(InvoiceRequestKSeF body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCommonInvoiceKsefRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return Response.FromValue((ExceptionResponse)null, message.Response);
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Pobranie faktury z repozytorium KSeF na podstawie kryteriów opartych o numer KSeF. </summary>
        /// <param name="body"> The InvoiceRequestKSeF to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<ExceptionResponse> CommonInvoiceKsef(InvoiceRequestKSeF body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCommonInvoiceKsefRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return Response.FromValue((ExceptionResponse)null, message.Response);
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCommonStatusRequest(string referenceNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/common/Status/", false);
            uri.AppendPath(referenceNumber, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Sprawdzenie statusu przetwarzania wsadowego. </summary>
        /// <param name="referenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="referenceNumber"/> is null. </exception>
        public async Task<Response<object>> CommonStatusAsync(string referenceNumber, CancellationToken cancellationToken = default)
        {
            if (referenceNumber == null)
            {
                throw new ArgumentNullException(nameof(referenceNumber));
            }

            using var message = CreateCommonStatusRequest(referenceNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatusResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatusResponse.DeserializeStatusResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sprawdzenie statusu przetwarzania wsadowego. </summary>
        /// <param name="referenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="referenceNumber"/> is null. </exception>
        public Response<object> CommonStatus(string referenceNumber, CancellationToken cancellationToken = default)
        {
            if (referenceNumber == null)
            {
                throw new ArgumentNullException(nameof(referenceNumber));
            }

            using var message = CreateCommonStatusRequest(referenceNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatusResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatusResponse.DeserializeStatusResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBatchFinishRequest(FinishRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/batch/Finish", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Finalizacja wysyłki wsadowej paczki faktur. </summary>
        /// <param name="body"> The FinishRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> BatchFinishAsync(FinishRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchFinishRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FinishResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = FinishResponse.DeserializeFinishResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Finalizacja wysyłki wsadowej paczki faktur. </summary>
        /// <param name="body"> The FinishRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> BatchFinish(FinishRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateBatchFinishRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FinishResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = FinishResponse.DeserializeFinishResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBatchInitRequest(Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/batch/Init", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Inicjalizacja wysyłki wsadowej paczki faktur. Podpisany dokument http://ksef.mf.gov.pl/schema/gtw/svc/batch/init/request/2021/10/01/0001/InitRequest. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public async Task<Response<object>> BatchInitAsync(Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateBatchInitRequest(data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        InitResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InitResponse.DeserializeInitResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Inicjalizacja wysyłki wsadowej paczki faktur. Podpisany dokument http://ksef.mf.gov.pl/schema/gtw/svc/batch/init/request/2021/10/01/0001/InitRequest. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public Response<object> BatchInit(Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateBatchInitRequest(data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                // =========================
                case 200:
                // =========================
                case 201:
                    {
                        InitResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InitResponse.DeserializeInitResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        // ============================
        internal HttpMessage CreateBatchUploadRequest(string referenceNumber, string partName, IReadOnlyList<HeaderEntryType> HeaderEntryList, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/batch/Upload/", false);
            uri.AppendPath(referenceNumber, true);
            uri.AppendPath("/", false);
            uri.AppendPath(partName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/octet-stream");
            foreach(var itm in HeaderEntryList)
                request.Headers.Add(itm.Key, itm.Value);    
            request.Content = RequestContent.Create(data);
            return message;
        }
        // ============================

        /// <summary> Załadowanie zaszyfrowanych części paczki. </summary>
        /// <param name="referenceNumber"> The String to use. </param>
        /// <param name="partName"> The String to use. </param>
        /// <param name="data"> Zaszyfrowana część paczki kluczem symetrycznym zadeklarowanym w dokumencie Init. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="referenceNumber"/>, <paramref name="partName"/> or <paramref name="data"/> is null. </exception>
        // ============================
        public async Task<Response<object>> BatchUploadAsync(string referenceNumber, string partName, IReadOnlyList<HeaderEntryType> HeaderEntryList, Stream data, CancellationToken cancellationToken = default)
        // ============================
        {
            if (referenceNumber == null)
            {
                throw new ArgumentNullException(nameof(referenceNumber));
            }
            if (partName == null)
            {
                throw new ArgumentNullException(nameof(partName));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }
            // ============================
            if (HeaderEntryList == null)
            {
                throw new ArgumentNullException(nameof(HeaderEntryList));
            }

            using var message = CreateBatchUploadRequest(referenceNumber, partName, HeaderEntryList, data);
            // ============================
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                // ============================
                case 200:
                // ============================
                case 201:
                    {
                        UploadResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UploadResponse.DeserializeUploadResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Załadowanie zaszyfrowanych części paczki. </summary>
        /// <param name="referenceNumber"> The String to use. </param>
        /// <param name="partName"> The String to use. </param>
        /// <param name="data"> Zaszyfrowana część paczki kluczem symetrycznym zadeklarowanym w dokumencie Init. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="referenceNumber"/>, <paramref name="partName"/> or <paramref name="data"/> is null. </exception>
        // ============================
        public Response<object> BatchUpload(string referenceNumber, string partName, IReadOnlyList<HeaderEntryType> HeaderEntryList, Stream data, CancellationToken cancellationToken = default)
        // ============================
        {
            if (referenceNumber == null)
            {
                throw new ArgumentNullException(nameof(referenceNumber));
            }
            if (partName == null)
            {
                throw new ArgumentNullException(nameof(partName));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }
            // ============================
            if (HeaderEntryList == null)
            {
                throw new ArgumentNullException(nameof(HeaderEntryList));
            }

            using var message = CreateBatchUploadRequest(referenceNumber, partName, HeaderEntryList, data);
            // ============================
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                // =============================
                case 200:
                // =============================
                case 201:
                    {
                        UploadResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UploadResponse.DeserializeUploadResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }


        internal HttpMessage CreateOnlineCredentialsGenerateTokenRequest(GenerateTokenRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Credentials/GenerateToken", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Generowanie tokena autoryzacyjnego. </summary>
        /// <param name="body"> The GenerateTokenRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlineCredentialsGenerateTokenAsync(GenerateTokenRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineCredentialsGenerateTokenRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GenerateTokenResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GenerateTokenResponse.DeserializeGenerateTokenResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Generowanie tokena autoryzacyjnego. </summary>
        /// <param name="body"> The GenerateTokenRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlineCredentialsGenerateToken(GenerateTokenRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineCredentialsGenerateTokenRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GenerateTokenResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GenerateTokenResponse.DeserializeGenerateTokenResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineCredentialsGrantRequest(GrantCredentialsRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Credentials/Grant", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Nadanie poświadczeń. </summary>
        /// <param name="body"> The GrantCredentialsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlineCredentialsGrantAsync(GrantCredentialsRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineCredentialsGrantRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StatusCredentialsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatusCredentialsResponse.DeserializeStatusCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Nadanie poświadczeń. </summary>
        /// <param name="body"> The GrantCredentialsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlineCredentialsGrant(GrantCredentialsRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineCredentialsGrantRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StatusCredentialsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatusCredentialsResponse.DeserializeStatusCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineCredentialsRevokeRequest(RevokeCredentialsRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Credentials/Revoke", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Odebranie poświadczeń. </summary>
        /// <param name="body"> The RevokeCredentialsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlineCredentialsRevokeAsync(RevokeCredentialsRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineCredentialsRevokeRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StatusCredentialsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatusCredentialsResponse.DeserializeStatusCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Odebranie poświadczeń. </summary>
        /// <param name="body"> The RevokeCredentialsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlineCredentialsRevoke(RevokeCredentialsRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineCredentialsRevokeRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StatusCredentialsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatusCredentialsResponse.DeserializeStatusCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineCredentialsRevokeTokenRequest(RevokeTokenRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Credentials/RevokeToken", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Odebranie Usunięcie tokena autoryzacyjnego. </summary>
        /// <param name="body"> The RevokeTokenRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlineCredentialsRevokeTokenAsync(RevokeTokenRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineCredentialsRevokeTokenRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StatusCredentialsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatusCredentialsResponse.DeserializeStatusCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Odebranie Usunięcie tokena autoryzacyjnego. </summary>
        /// <param name="body"> The RevokeTokenRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlineCredentialsRevokeToken(RevokeTokenRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineCredentialsRevokeTokenRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        StatusCredentialsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatusCredentialsResponse.DeserializeStatusCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineCredentialsStatusRequest(string credentialsElementReferenceNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Credentials/Status/", false);
            uri.AppendPath(credentialsElementReferenceNumber, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return message;
        }

        /// <summary> Sprawdzenie statusu poświadczeń. </summary>
        /// <param name="credentialsElementReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credentialsElementReferenceNumber"/> is null. </exception>
        public async Task<Response<object>> OnlineCredentialsStatusAsync(string credentialsElementReferenceNumber, CancellationToken cancellationToken = default)
        {
            if (credentialsElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(credentialsElementReferenceNumber));
            }

            using var message = CreateOnlineCredentialsStatusRequest(credentialsElementReferenceNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatusCredentialsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatusCredentialsResponse.DeserializeStatusCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sprawdzenie statusu poświadczeń. </summary>
        /// <param name="credentialsElementReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credentialsElementReferenceNumber"/> is null. </exception>
        public Response<object> OnlineCredentialsStatus(string credentialsElementReferenceNumber, CancellationToken cancellationToken = default)
        {
            if (credentialsElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(credentialsElementReferenceNumber));
            }

            using var message = CreateOnlineCredentialsStatusRequest(credentialsElementReferenceNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatusCredentialsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatusCredentialsResponse.DeserializeStatusCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineInvoiceGetRequest(string kSeFReferenceNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Invoice/Get/", false);
            uri.AppendPath(kSeFReferenceNumber, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return message;
        }

        /// <summary> Pobranie faktury. </summary>
        /// <param name="kSeFReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="kSeFReferenceNumber"/> is null. </exception>
        public async Task<Response<ExceptionResponse>> OnlineInvoiceGetAsync(string kSeFReferenceNumber, CancellationToken cancellationToken = default)
        {
            if (kSeFReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(kSeFReferenceNumber));
            }

            using var message = CreateOnlineInvoiceGetRequest(kSeFReferenceNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return Response.FromValue((ExceptionResponse)null, message.Response);
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Pobranie faktury. </summary>
        /// <param name="kSeFReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="kSeFReferenceNumber"/> is null. </exception>
// ====================================
        public Response<object> OnlineInvoiceGet(string kSeFReferenceNumber, 
            CancellationToken cancellationToken = default)
        {
            if (kSeFReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(kSeFReferenceNumber));
            }

            using var message = CreateOnlineInvoiceGetRequest(kSeFReferenceNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    using (StreamReader reader = new(message.Response.ContentStream, System.Text.Encoding.UTF8))
                    {
                        return Response.FromValue<object>(reader.ReadToEnd(), message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
        // ====================================

        internal HttpMessage CreateOnlineInvoiceSendRequest(SendInvoiceRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Invoice/Send", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Wysyłka faktury. </summary>
        /// <param name="body"> The SendInvoiceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlineInvoiceSendAsync(SendInvoiceRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineInvoiceSendRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        SendInvoiceResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SendInvoiceResponse.DeserializeSendInvoiceResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Wysyłka faktury. </summary>
        /// <param name="body"> The SendInvoiceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlineInvoiceSend(SendInvoiceRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineInvoiceSendRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        SendInvoiceResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SendInvoiceResponse.DeserializeSendInvoiceResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineInvoiceStatusRequest(string invoiceElementReferenceNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Invoice/Status/", false);
            uri.AppendPath(invoiceElementReferenceNumber, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return message;
        }

        /// <summary> Sprawdzenie statusu wysłanej faktury. </summary>
        /// <param name="invoiceElementReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="invoiceElementReferenceNumber"/> is null. </exception>
        public async Task<Response<object>> OnlineInvoiceStatusAsync(string invoiceElementReferenceNumber, CancellationToken cancellationToken = default)
        {
            if (invoiceElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(invoiceElementReferenceNumber));
            }

            using var message = CreateOnlineInvoiceStatusRequest(invoiceElementReferenceNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatusInvoiceResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatusInvoiceResponse.DeserializeStatusInvoiceResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sprawdzenie statusu wysłanej faktury. </summary>
        /// <param name="invoiceElementReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="invoiceElementReferenceNumber"/> is null. </exception>
        public Response<object> OnlineInvoiceStatus(string invoiceElementReferenceNumber, CancellationToken cancellationToken = default)
        {
            if (invoiceElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(invoiceElementReferenceNumber));
            }

            using var message = CreateOnlineInvoiceStatusRequest(invoiceElementReferenceNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatusInvoiceResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatusInvoiceResponse.DeserializeStatusInvoiceResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlinePaymentIdentifierGetReferenceNumbersRequest(string paymentIdentifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Payment/Identifier/GetReferenceNumbers/", false);
            uri.AppendPath(paymentIdentifier, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return message;
        }

        /// <summary> Pobranie listy faktur dla identyfikatora płatności. </summary>
        /// <param name="paymentIdentifier"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="paymentIdentifier"/> is null. </exception>
        public async Task<Response<object>> OnlinePaymentIdentifierGetReferenceNumbersAsync(string paymentIdentifier, CancellationToken cancellationToken = default)
        {
            if (paymentIdentifier == null)
            {
                throw new ArgumentNullException(nameof(paymentIdentifier));
            }

            using var message = CreateOnlinePaymentIdentifierGetReferenceNumbersRequest(paymentIdentifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetPaymentIdentifierReferenceNumbersResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GetPaymentIdentifierReferenceNumbersResponse.DeserializeGetPaymentIdentifierReferenceNumbersResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Pobranie listy faktur dla identyfikatora płatności. </summary>
        /// <param name="paymentIdentifier"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="paymentIdentifier"/> is null. </exception>
        public Response<object> OnlinePaymentIdentifierGetReferenceNumbers(string paymentIdentifier, CancellationToken cancellationToken = default)
        {
            if (paymentIdentifier == null)
            {
                throw new ArgumentNullException(nameof(paymentIdentifier));
            }

            using var message = CreateOnlinePaymentIdentifierGetReferenceNumbersRequest(paymentIdentifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GetPaymentIdentifierReferenceNumbersResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GetPaymentIdentifierReferenceNumbersResponse.DeserializeGetPaymentIdentifierReferenceNumbersResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlinePaymentIdentifierRequestRequest(RequestPaymentIdentifierRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Payment/Identifier/Request", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Wygenerowanie identyfikatora płatności. </summary>
        /// <param name="body"> The RequestPaymentIdentifierRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlinePaymentIdentifierRequestAsync(RequestPaymentIdentifierRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlinePaymentIdentifierRequestRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        RequestPaymentIdentifierResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestPaymentIdentifierResponse.DeserializeRequestPaymentIdentifierResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Wygenerowanie identyfikatora płatności. </summary>
        /// <param name="body"> The RequestPaymentIdentifierRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlinePaymentIdentifierRequest(RequestPaymentIdentifierRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlinePaymentIdentifierRequestRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        RequestPaymentIdentifierResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestPaymentIdentifierResponse.DeserializeRequestPaymentIdentifierResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineQueryCredentialsRequest(QuerySyncCredentialsRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Query/Credential/Sync", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Zapytanie o poświadczenia. </summary>
        /// <param name="body"> The QuerySyncCredentialsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlineQueryCredentialsAsync(QuerySyncCredentialsRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineQueryCredentialsRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QuerySyncCredentialsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QuerySyncCredentialsResponse.DeserializeQuerySyncCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Zapytanie o poświadczenia. </summary>
        /// <param name="body"> The QuerySyncCredentialsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlineQueryCredentials(QuerySyncCredentialsRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineQueryCredentialsRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QuerySyncCredentialsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QuerySyncCredentialsResponse.DeserializeQuerySyncCredentialsResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineQueryInvoiceFetchRequest(string queryElementReferenceNumber, string partElementReferenceNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Query/Invoice/Async/Fetch/", false);
            uri.AppendPath(queryElementReferenceNumber, true);
            uri.AppendPath("/", false);
            uri.AppendPath(partElementReferenceNumber, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return message;
        }

        /// <summary> Pobranie wyników zapytania o faktury. </summary>
        /// <param name="queryElementReferenceNumber"> The String to use. </param>
        /// <param name="partElementReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryElementReferenceNumber"/> or <paramref name="partElementReferenceNumber"/> is null. </exception>
        public async Task<Response<ExceptionResponse>> OnlineQueryInvoiceFetchAsync(string queryElementReferenceNumber, string partElementReferenceNumber, CancellationToken cancellationToken = default)
        {
            if (queryElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(queryElementReferenceNumber));
            }
            if (partElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(partElementReferenceNumber));
            }

            using var message = CreateOnlineQueryInvoiceFetchRequest(queryElementReferenceNumber, partElementReferenceNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return Response.FromValue((ExceptionResponse)null, message.Response);
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Pobranie wyników zapytania o faktury. </summary>
        /// <param name="queryElementReferenceNumber"> The String to use. </param>
        /// <param name="partElementReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryElementReferenceNumber"/> or <paramref name="partElementReferenceNumber"/> is null. </exception>
        // ===========================
        public Response<ExceptionResponse> OnlineQueryInvoiceFetch(string queryElementReferenceNumber, string partElementReferenceNumber, 
                                string FileName, 
                                CancellationToken cancellationToken = default)
        // ===========================
        {
            if (queryElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(queryElementReferenceNumber));
            }
            if (partElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(partElementReferenceNumber));
            }

            using var message = CreateOnlineQueryInvoiceFetchRequest(queryElementReferenceNumber, partElementReferenceNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    // ===========================
                    //return Response.FromValue((ExceptionResponse)null, message.Response);
                    using (var f = new System.IO.FileStream(FileName, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
                    {
                        message.Response.ContentStream.CopyTo(f);
                    }
                    return Response.FromValue((ExceptionResponse)null, message.Response);
                // ===========================

                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineQueryInvoiceInitRequest(QueryInvoiceRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Query/Invoice/Async/Init", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Inicjalizacja zapytania o faktury. </summary>
        /// <param name="body"> The QueryInvoiceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlineQueryInvoiceInitAsync(QueryInvoiceRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineQueryInvoiceInitRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        QueryInvoiceAsyncInitResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryInvoiceAsyncInitResponse.DeserializeQueryInvoiceAsyncInitResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Inicjalizacja zapytania o faktury. </summary>
        /// <param name="body"> The QueryInvoiceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlineQueryInvoiceInit(QueryInvoiceRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineQueryInvoiceInitRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        QueryInvoiceAsyncInitResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryInvoiceAsyncInitResponse.DeserializeQueryInvoiceAsyncInitResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineQueryInvoiceStatusRequest(string queryElementReferenceNumber)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Query/Invoice/Async/Status/", false);
            uri.AppendPath(queryElementReferenceNumber, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return message;
        }

        /// <summary> Sprawdzenie statusu zapytania o faktury. </summary>
        /// <param name="queryElementReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryElementReferenceNumber"/> is null. </exception>
        public async Task<Response<object>> OnlineQueryInvoiceStatusAsync(string queryElementReferenceNumber, CancellationToken cancellationToken = default)
        {
            if (queryElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(queryElementReferenceNumber));
            }

            using var message = CreateOnlineQueryInvoiceStatusRequest(queryElementReferenceNumber);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryInvoiceAsyncStatusResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryInvoiceAsyncStatusResponse.DeserializeQueryInvoiceAsyncStatusResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sprawdzenie statusu zapytania o faktury. </summary>
        /// <param name="queryElementReferenceNumber"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryElementReferenceNumber"/> is null. </exception>
        public Response<object> OnlineQueryInvoiceStatus(string queryElementReferenceNumber, CancellationToken cancellationToken = default)
        {
            if (queryElementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(queryElementReferenceNumber));
            }

            using var message = CreateOnlineQueryInvoiceStatusRequest(queryElementReferenceNumber);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryInvoiceAsyncStatusResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryInvoiceAsyncStatusResponse.DeserializeQueryInvoiceAsyncStatusResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineQueryInvoiceRequest(int pageSize, int pageOffset, QueryInvoiceRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Query/Invoice/Sync", false);
            uri.AppendQuery("PageSize", pageSize, true);
            uri.AppendQuery("PageOffset", pageOffset, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Zapytanie o faktury. </summary>
        /// <param name="pageSize"> The Integer to use. </param>
        /// <param name="pageOffset"> The Integer to use. </param>
        /// <param name="body"> The QueryInvoiceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlineQueryInvoiceAsync(int pageSize, int pageOffset, QueryInvoiceRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineQueryInvoiceRequest(pageSize, pageOffset, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryInvoiceSyncResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryInvoiceSyncResponse.DeserializeQueryInvoiceSyncResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Zapytanie o faktury. </summary>
        /// <param name="pageSize"> The Integer to use. </param>
        /// <param name="pageOffset"> The Integer to use. </param>
        /// <param name="body"> The QueryInvoiceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlineQueryInvoice(int pageSize, int pageOffset, QueryInvoiceRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineQueryInvoiceRequest(pageSize, pageOffset, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryInvoiceSyncResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryInvoiceSyncResponse.DeserializeQueryInvoiceSyncResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineSessionAuthorisationChallengeRequest(AuthorisationChallengeRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Session/AuthorisationChallenge", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Inicjalizacja mechanizmu uwierzytelnienia i autoryzacji. </summary>
        /// <param name="body"> The AuthorisationChallengeRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response<object>> OnlineSessionAuthorisationChallengeAsync(AuthorisationChallengeRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineSessionAuthorisationChallengeRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        AuthorisationChallengeResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AuthorisationChallengeResponse.DeserializeAuthorisationChallengeResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Inicjalizacja mechanizmu uwierzytelnienia i autoryzacji. </summary>
        /// <param name="body"> The AuthorisationChallengeRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response<object> OnlineSessionAuthorisationChallenge(AuthorisationChallengeRequest body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateOnlineSessionAuthorisationChallengeRequest(body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        AuthorisationChallengeResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AuthorisationChallengeResponse.DeserializeAuthorisationChallengeResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineSessionSignedInitRequest(Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Session/InitSigned", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Inicjalizacja sesji interaktywnej. Podpisany dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionSignedRequest. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public async Task<Response<object>> OnlineSessionSignedInitAsync(Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateOnlineSessionSignedInitRequest(data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        InitSessionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InitSessionResponse.DeserializeInitSessionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Inicjalizacja sesji interaktywnej. Podpisany dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionSignedRequest. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public Response<object> OnlineSessionSignedInit(Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateOnlineSessionSignedInitRequest(data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        InitSessionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InitSessionResponse.DeserializeInitSessionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineSessionTokenInitRequest(Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Session/InitToken", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Inicjalizacja sesji interaktywnej. Zaszyfrowany kluczem publicznym KSeF dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionTokenRequest. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public async Task<Response<object>> OnlineSessionTokenInitAsync(Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateOnlineSessionTokenInitRequest(data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        InitSessionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InitSessionResponse.DeserializeInitSessionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Inicjalizacja sesji interaktywnej. Zaszyfrowany kluczem publicznym KSeF dokument http://ksef.mf.gov.pl/schema/gtw/svc/online/auth/request/2021/10/01/0001/InitSessionTokenRequest. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public Response<object> OnlineSessionTokenInit(Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateOnlineSessionTokenInitRequest(data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        InitSessionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InitSessionResponse.DeserializeInitSessionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineSessionStatusPlainRequest(int pageSize, int pageOffset)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Session/Status", false);
            uri.AppendQuery("PageSize", pageSize, true);
            uri.AppendQuery("PageOffset", pageOffset, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return message;
        }

        /// <summary> Sprawdzenie statusu obecnego przetwarzania interaktywnego. </summary>
        /// <param name="pageSize"> The Integer to use. </param>
        /// <param name="pageOffset"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> OnlineSessionStatusPlainAsync(int pageSize, int pageOffset, CancellationToken cancellationToken = default)
        {
            using var message = CreateOnlineSessionStatusPlainRequest(pageSize, pageOffset);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionStatusResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SessionStatusResponse.DeserializeSessionStatusResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sprawdzenie statusu obecnego przetwarzania interaktywnego. </summary>
        /// <param name="pageSize"> The Integer to use. </param>
        /// <param name="pageOffset"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> OnlineSessionStatusPlain(int pageSize, int pageOffset, CancellationToken cancellationToken = default)
        {
            using var message = CreateOnlineSessionStatusPlainRequest(pageSize, pageOffset);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionStatusResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SessionStatusResponse.DeserializeSessionStatusResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineSessionStatusReferenceNumberRequest(string referenceNumber, int pageSize, int pageOffset)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Session/Status/", false);
            uri.AppendPath(referenceNumber, true);
            uri.AppendQuery("PageSize", pageSize, true);
            uri.AppendQuery("PageOffset", pageOffset, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return message;
        }

        /// <summary> Sprawdzenie statusu przetwarzania na podstawie numeru referencyjnego. </summary>
        /// <param name="referenceNumber"> The String to use. </param>
        /// <param name="pageSize"> The Integer to use. </param>
        /// <param name="pageOffset"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="referenceNumber"/> is null. </exception>
        public async Task<Response<object>> OnlineSessionStatusReferenceNumberAsync(string referenceNumber, int pageSize, int pageOffset, CancellationToken cancellationToken = default)
        {
            if (referenceNumber == null)
            {
                throw new ArgumentNullException(nameof(referenceNumber));
            }

            using var message = CreateOnlineSessionStatusReferenceNumberRequest(referenceNumber, pageSize, pageOffset);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionStatusResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SessionStatusResponse.DeserializeSessionStatusResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sprawdzenie statusu przetwarzania na podstawie numeru referencyjnego. </summary>
        /// <param name="referenceNumber"> The String to use. </param>
        /// <param name="pageSize"> The Integer to use. </param>
        /// <param name="pageOffset"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="referenceNumber"/> is null. </exception>
        public Response<object> OnlineSessionStatusReferenceNumber(string referenceNumber, int pageSize, int pageOffset, CancellationToken cancellationToken = default)
        {
            if (referenceNumber == null)
            {
                throw new ArgumentNullException(nameof(referenceNumber));
            }

            using var message = CreateOnlineSessionStatusReferenceNumberRequest(referenceNumber, pageSize, pageOffset);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SessionStatusResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SessionStatusResponse.DeserializeSessionStatusResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOnlineSessionTerminateRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/online/Session/Terminate", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            request.Headers.Add("SessionToken", OurSessionToken);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return message;
        }

        /// <summary> Wymuszenie zamknięcia sesji interaktywnej. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<object>> OnlineSessionTerminateAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateOnlineSessionTerminateRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TerminateSessionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TerminateSessionResponse.DeserializeTerminateSessionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Wymuszenie zamknięcia sesji interaktywnej. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<object> OnlineSessionTerminate(CancellationToken cancellationToken = default)
        {
            using var message = CreateOnlineSessionTerminateRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TerminateSessionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TerminateSessionResponse.DeserializeTerminateSessionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                case 400:
                case 401:
                    {
                        ExceptionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ExceptionResponse.DeserializeExceptionResponse(document.RootElement);
                        return Response.FromValue<object>(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
