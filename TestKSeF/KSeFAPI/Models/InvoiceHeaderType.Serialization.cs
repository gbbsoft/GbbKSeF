// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace KSeFAPI.Models
{
    public partial class InvoiceHeaderType
    {
        internal static InvoiceHeaderType DeserializeInvoiceHeaderType(JsonElement element)
        {
            string invoiceReferenceNumber = default;
            string ksefReferenceNumber = default;
            FileUnlimitedHashType invoiceHash = default;
            DateTimeOffset invoicingDate = default;
            DateTimeOffset acquisitionTimestamp = default;
            SubjectByType subjectBy = default;
            Optional<SubjectByType> subjectByK = default;
            SubjectToType subjectTo = default;
            Optional<IReadOnlyList<SubjectToType>> subjectToKList = default;
            Optional<IReadOnlyList<SubjectOtherType>> subjectsOtherList = default;
            Optional<IReadOnlyList<SubjectAuthorizedType>> subjectsAuthorizedList = default;
            string net = default;
            string vat = default;
            string gross = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("invoiceReferenceNumber"))
                {
                    invoiceReferenceNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ksefReferenceNumber"))
                {
                    ksefReferenceNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("invoiceHash"))
                {
                    invoiceHash = FileUnlimitedHashType.DeserializeFileUnlimitedHashType(property.Value);
                    continue;
                }
                if (property.NameEquals("invoicingDate"))
                {
                    invoicingDate = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("acquisitionTimestamp"))
                {
                    acquisitionTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("subjectBy"))
                {
                    subjectBy = SubjectByType.DeserializeSubjectByType(property.Value);
                    continue;
                }
                if (property.NameEquals("subjectByK"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    subjectByK = SubjectByType.DeserializeSubjectByType(property.Value);
                    continue;
                }
                if (property.NameEquals("subjectTo"))
                {
                    subjectTo = SubjectToType.DeserializeSubjectToType(property.Value);
                    continue;
                }
                if (property.NameEquals("subjectToKList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SubjectToType> array = new List<SubjectToType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SubjectToType.DeserializeSubjectToType(item));
                    }
                    subjectToKList = array;
                    continue;
                }
                if (property.NameEquals("subjectsOtherList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SubjectOtherType> array = new List<SubjectOtherType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SubjectOtherType.DeserializeSubjectOtherType(item));
                    }
                    subjectsOtherList = array;
                    continue;
                }
                if (property.NameEquals("subjectsAuthorizedList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SubjectAuthorizedType> array = new List<SubjectAuthorizedType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SubjectAuthorizedType.DeserializeSubjectAuthorizedType(item));
                    }
                    subjectsAuthorizedList = array;
                    continue;
                }
                if (property.NameEquals("net"))
                {
                    net = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vat"))
                {
                    vat = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gross"))
                {
                    gross = property.Value.GetString();
                    continue;
                }
            }
            return new InvoiceHeaderType(invoiceReferenceNumber, ksefReferenceNumber, invoiceHash, invoicingDate, acquisitionTimestamp, subjectBy, subjectByK.Value, subjectTo, Optional.ToList(subjectToKList), Optional.ToList(subjectsOtherList), Optional.ToList(subjectsAuthorizedList), net, vat, gross);
        }
    }
}
