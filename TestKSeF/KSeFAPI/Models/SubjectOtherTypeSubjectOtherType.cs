// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace KSeFAPI.Models
{
    /// <summary> The SubjectOtherTypeSubjectOtherType. </summary>
    public readonly partial struct SubjectOtherTypeSubjectOtherType : IEquatable<SubjectOtherTypeSubjectOtherType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SubjectOtherTypeSubjectOtherType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SubjectOtherTypeSubjectOtherType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FactorValue = "factor";
        private const string RecipientValue = "recipient";
        private const string OriginalSubjectValue = "original_subject";
        private const string AdditionalPurchaserValue = "additional_purchaser";
        private const string InvoiceIssuerValue = "invoice_issuer";
        private const string PayerValue = "payer";
        private const string OtherValue = "other";

        /// <summary> factor. </summary>
        public static SubjectOtherTypeSubjectOtherType Factor { get; } = new SubjectOtherTypeSubjectOtherType(FactorValue);
        /// <summary> recipient. </summary>
        public static SubjectOtherTypeSubjectOtherType Recipient { get; } = new SubjectOtherTypeSubjectOtherType(RecipientValue);
        /// <summary> original_subject. </summary>
        public static SubjectOtherTypeSubjectOtherType OriginalSubject { get; } = new SubjectOtherTypeSubjectOtherType(OriginalSubjectValue);
        /// <summary> additional_purchaser. </summary>
        public static SubjectOtherTypeSubjectOtherType AdditionalPurchaser { get; } = new SubjectOtherTypeSubjectOtherType(AdditionalPurchaserValue);
        /// <summary> invoice_issuer. </summary>
        public static SubjectOtherTypeSubjectOtherType InvoiceIssuer { get; } = new SubjectOtherTypeSubjectOtherType(InvoiceIssuerValue);
        /// <summary> payer. </summary>
        public static SubjectOtherTypeSubjectOtherType Payer { get; } = new SubjectOtherTypeSubjectOtherType(PayerValue);
        /// <summary> other. </summary>
        public static SubjectOtherTypeSubjectOtherType Other { get; } = new SubjectOtherTypeSubjectOtherType(OtherValue);
        /// <summary> Determines if two <see cref="SubjectOtherTypeSubjectOtherType"/> values are the same. </summary>
        public static bool operator ==(SubjectOtherTypeSubjectOtherType left, SubjectOtherTypeSubjectOtherType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SubjectOtherTypeSubjectOtherType"/> values are not the same. </summary>
        public static bool operator !=(SubjectOtherTypeSubjectOtherType left, SubjectOtherTypeSubjectOtherType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SubjectOtherTypeSubjectOtherType"/>. </summary>
        public static implicit operator SubjectOtherTypeSubjectOtherType(string value) => new SubjectOtherTypeSubjectOtherType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SubjectOtherTypeSubjectOtherType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SubjectOtherTypeSubjectOtherType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
