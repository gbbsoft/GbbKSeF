// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace KSeFAPI.Models
{
    /// <summary> choices for server host. </summary>
    public readonly partial struct HostOptions : IEquatable<HostOptions>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HostOptions"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HostOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HttpsKsefMfGovPlApiValue = "https://ksef.mf.gov.pl/api";
        private const string HttpsKsefDemoMfGovPlApiValue = "https://ksef-demo.mf.gov.pl/api";
        private const string HttpsKsefTestMfGovPlApiValue = "https://ksef-test.mf.gov.pl/api";

        /// <summary> host: https://ksef.mf.gov.pl/api. </summary>
        public static HostOptions HttpsKsefMfGovPlApi { get; } = new HostOptions(HttpsKsefMfGovPlApiValue);
        /// <summary> host: https://ksef-demo.mf.gov.pl/api. </summary>
        public static HostOptions HttpsKsefDemoMfGovPlApi { get; } = new HostOptions(HttpsKsefDemoMfGovPlApiValue);
        /// <summary> host: https://ksef-test.mf.gov.pl/api. </summary>
        public static HostOptions HttpsKsefTestMfGovPlApi { get; } = new HostOptions(HttpsKsefTestMfGovPlApiValue);
        /// <summary> Determines if two <see cref="HostOptions"/> values are the same. </summary>
        public static bool operator ==(HostOptions left, HostOptions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HostOptions"/> values are not the same. </summary>
        public static bool operator !=(HostOptions left, HostOptions right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HostOptions"/>. </summary>
        public static implicit operator HostOptions(string value) => new HostOptions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HostOptions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HostOptions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
