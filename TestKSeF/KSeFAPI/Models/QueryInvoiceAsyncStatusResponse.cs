// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace KSeFAPI.Models
{
    /// <summary> The QueryInvoiceAsyncStatusResponse. </summary>
    public partial class QueryInvoiceAsyncStatusResponse
    {
        /// <summary> Initializes a new instance of QueryInvoiceAsyncStatusResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="elementReferenceNumber"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="numberOfElements"></param>
        /// <param name="divisionType"></param>
        /// <param name="partList"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="referenceNumber"/>, <paramref name="processingDescription"/>, <paramref name="elementReferenceNumber"/> or <paramref name="partList"/> is null. </exception>
        internal QueryInvoiceAsyncStatusResponse(DateTimeOffset timestamp, string referenceNumber, int processingCode, string processingDescription, string elementReferenceNumber, int numberOfParts, long numberOfElements, QueryInvoiceAsyncStatusResponseDivisionType divisionType, IEnumerable<InvoiceDivisionPlainPartType> partList)
        {
            if (referenceNumber == null)
            {
                throw new ArgumentNullException(nameof(referenceNumber));
            }
            if (processingDescription == null)
            {
                throw new ArgumentNullException(nameof(processingDescription));
            }
            if (elementReferenceNumber == null)
            {
                throw new ArgumentNullException(nameof(elementReferenceNumber));
            }
            if (partList == null)
            {
                throw new ArgumentNullException(nameof(partList));
            }

            Timestamp = timestamp;
            ReferenceNumber = referenceNumber;
            ProcessingCode = processingCode;
            ProcessingDescription = processingDescription;
            ElementReferenceNumber = elementReferenceNumber;
            NumberOfParts = numberOfParts;
            NumberOfElements = numberOfElements;
            DivisionType = divisionType;
            PartList = partList.ToList();
        }

        /// <summary> Initializes a new instance of QueryInvoiceAsyncStatusResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="elementReferenceNumber"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="numberOfElements"></param>
        /// <param name="divisionType"></param>
        /// <param name="partList"></param>
        internal QueryInvoiceAsyncStatusResponse(DateTimeOffset timestamp, string referenceNumber, int processingCode, string processingDescription, string elementReferenceNumber, int numberOfParts, long numberOfElements, QueryInvoiceAsyncStatusResponseDivisionType divisionType, IReadOnlyList<InvoiceDivisionPlainPartType> partList)
        {
            Timestamp = timestamp;
            ReferenceNumber = referenceNumber;
            ProcessingCode = processingCode;
            ProcessingDescription = processingDescription;
            ElementReferenceNumber = elementReferenceNumber;
            NumberOfParts = numberOfParts;
            NumberOfElements = numberOfElements;
            DivisionType = divisionType;
            PartList = partList;
        }

        /// <summary> Gets the timestamp. </summary>
        public DateTimeOffset Timestamp { get; }
        /// <summary> Gets the reference number. </summary>
        public string ReferenceNumber { get; }
        /// <summary> Gets the processing code. </summary>
        public int ProcessingCode { get; }
        /// <summary> Gets the processing description. </summary>
        public string ProcessingDescription { get; }
        /// <summary> Gets the element reference number. </summary>
        public string ElementReferenceNumber { get; }
        /// <summary> Gets the number of parts. </summary>
        public int NumberOfParts { get; }
        /// <summary> Gets the number of elements. </summary>
        public long NumberOfElements { get; }
        /// <summary> Gets the division type. </summary>
        public QueryInvoiceAsyncStatusResponseDivisionType DivisionType { get; }
        /// <summary> Gets the part list. </summary>
        public IReadOnlyList<InvoiceDivisionPlainPartType> PartList { get; }
    }
}
