// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace KSeFAPI.Models
{
    /// <summary> The SubjectAuthorizedTypeSubjectAuthorizedType. </summary>
    public readonly partial struct SubjectAuthorizedTypeSubjectAuthorizedType : IEquatable<SubjectAuthorizedTypeSubjectAuthorizedType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SubjectAuthorizedTypeSubjectAuthorizedType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SubjectAuthorizedTypeSubjectAuthorizedType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnforcementAuthorityValue = "enforcement_authority";
        private const string CourtBailiffValue = "court_bailiff";
        private const string TaxRepresentativeValue = "tax_representative";

        /// <summary> enforcement_authority. </summary>
        public static SubjectAuthorizedTypeSubjectAuthorizedType EnforcementAuthority { get; } = new SubjectAuthorizedTypeSubjectAuthorizedType(EnforcementAuthorityValue);
        /// <summary> court_bailiff. </summary>
        public static SubjectAuthorizedTypeSubjectAuthorizedType CourtBailiff { get; } = new SubjectAuthorizedTypeSubjectAuthorizedType(CourtBailiffValue);
        /// <summary> tax_representative. </summary>
        public static SubjectAuthorizedTypeSubjectAuthorizedType TaxRepresentative { get; } = new SubjectAuthorizedTypeSubjectAuthorizedType(TaxRepresentativeValue);
        /// <summary> Determines if two <see cref="SubjectAuthorizedTypeSubjectAuthorizedType"/> values are the same. </summary>
        public static bool operator ==(SubjectAuthorizedTypeSubjectAuthorizedType left, SubjectAuthorizedTypeSubjectAuthorizedType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SubjectAuthorizedTypeSubjectAuthorizedType"/> values are not the same. </summary>
        public static bool operator !=(SubjectAuthorizedTypeSubjectAuthorizedType left, SubjectAuthorizedTypeSubjectAuthorizedType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SubjectAuthorizedTypeSubjectAuthorizedType"/>. </summary>
        public static implicit operator SubjectAuthorizedTypeSubjectAuthorizedType(string value) => new SubjectAuthorizedTypeSubjectAuthorizedType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SubjectAuthorizedTypeSubjectAuthorizedType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SubjectAuthorizedTypeSubjectAuthorizedType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
