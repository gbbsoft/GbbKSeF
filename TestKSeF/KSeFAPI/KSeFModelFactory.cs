// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace KSeFAPI.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class KSeFModelFactory
    {
        /// <summary> Initializes a new instance of ExceptionResponse. </summary>
        /// <param name="exception"></param>
        /// <returns> A new <see cref="Models.ExceptionResponse"/> instance for mocking. </returns>
        public static ExceptionResponse ExceptionResponse(ExceptionType exception = null)
        {
            return new ExceptionResponse(exception);
        }

        /// <summary> Initializes a new instance of ExceptionType. </summary>
        /// <param name="serviceCtx"></param>
        /// <param name="serviceCode"></param>
        /// <param name="serviceName"></param>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="exceptionDetailList"></param>
        /// <returns> A new <see cref="Models.ExceptionType"/> instance for mocking. </returns>
        public static ExceptionType ExceptionType(string serviceCtx = null, string serviceCode = null, string serviceName = null, DateTimeOffset timestamp = default, string referenceNumber = null, IEnumerable<ExceptionDetailType> exceptionDetailList = null)
        {
            exceptionDetailList ??= new List<ExceptionDetailType>();

            return new ExceptionType(serviceCtx, serviceCode, serviceName, timestamp, referenceNumber, exceptionDetailList?.ToList());
        }

        /// <summary> Initializes a new instance of ExceptionDetailType. </summary>
        /// <param name="exceptionCode"></param>
        /// <param name="exceptionDescription"></param>
        /// <returns> A new <see cref="Models.ExceptionDetailType"/> instance for mocking. </returns>
        public static ExceptionDetailType ExceptionDetailType(int exceptionCode = default, string exceptionDescription = null)
        {
            return new ExceptionDetailType(exceptionCode, exceptionDescription);
        }

        /// <summary> Initializes a new instance of StatusResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="upo"></param>
        /// <returns> A new <see cref="Models.StatusResponse"/> instance for mocking. </returns>
        public static StatusResponse StatusResponse(DateTimeOffset timestamp = default, string referenceNumber = null, int processingCode = default, string processingDescription = null, /*Stream*/ string  upo = null)
        {
            return new StatusResponse(timestamp, referenceNumber, processingCode, processingDescription, upo);
        }

        /// <summary> Initializes a new instance of FinishResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <returns> A new <see cref="Models.FinishResponse"/> instance for mocking. </returns>
        public static FinishResponse FinishResponse(DateTimeOffset timestamp = default, string referenceNumber = null)
        {
            return new FinishResponse(timestamp, referenceNumber);
        }

        /// <summary> Initializes a new instance of InitResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="packageSignature"></param>
        /// <returns> A new <see cref="Models.InitResponse"/> instance for mocking. </returns>
        public static InitResponse InitResponse(DateTimeOffset timestamp = default, string referenceNumber = null, PackageSignatureInitResponseType packageSignature = null)
        {
            return new InitResponse(timestamp, referenceNumber, packageSignature);
        }

        /// <summary> Initializes a new instance of PackageSignatureInitResponseType. </summary>
        /// <param name="packageName"></param>
        /// <param name="packagePartSignatureList"></param>
        /// <returns> A new <see cref="Models.PackageSignatureInitResponseType"/> instance for mocking. </returns>
        public static PackageSignatureInitResponseType PackageSignatureInitResponseType(string packageName = null, IEnumerable<PackagePartSignatureInitResponseType> packagePartSignatureList = null)
        {
            packagePartSignatureList ??= new List<PackagePartSignatureInitResponseType>();

            return new PackageSignatureInitResponseType(packageName, packagePartSignatureList?.ToList());
        }

        /// <summary> Initializes a new instance of PackagePartSignatureInitResponseType. </summary>
        /// <param name="ordinalNumber"></param>
        /// <param name="partFileName"></param>
        /// <param name="url"></param>
        /// <param name="method"></param>
        /// <param name="headerEntryList"></param>
        /// <returns> A new <see cref="Models.PackagePartSignatureInitResponseType"/> instance for mocking. </returns>
        public static PackagePartSignatureInitResponseType PackagePartSignatureInitResponseType(int ordinalNumber = default, string partFileName = null, string url = null, PackagePartSignatureInitResponseTypeMethod method = default, IEnumerable<HeaderEntryType> headerEntryList = null)
        {
            headerEntryList ??= new List<HeaderEntryType>();

            return new PackagePartSignatureInitResponseType(ordinalNumber, partFileName, url, method, headerEntryList?.ToList());
        }

        /// <summary> Initializes a new instance of HeaderEntryType. </summary>
        /// <param name="key"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.HeaderEntryType"/> instance for mocking. </returns>
        public static HeaderEntryType HeaderEntryType(string key = null, string value = null)
        {
            return new HeaderEntryType(key, value);
        }

        /// <summary> Initializes a new instance of UploadResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <returns> A new <see cref="Models.UploadResponse"/> instance for mocking. </returns>
        public static UploadResponse UploadResponse(DateTimeOffset timestamp = default, string referenceNumber = null)
        {
            return new UploadResponse(timestamp, referenceNumber);
        }

        /// <summary> Initializes a new instance of GenerateTokenResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="elementReferenceNumber"></param>
        /// <param name="authorisationToken"></param>
        /// <returns> A new <see cref="Models.GenerateTokenResponse"/> instance for mocking. </returns>
        public static GenerateTokenResponse GenerateTokenResponse(DateTimeOffset timestamp = default, string referenceNumber = null, int processingCode = default, string processingDescription = null, string elementReferenceNumber = null, string authorisationToken = null)
        {
            return new GenerateTokenResponse(timestamp, referenceNumber, processingCode, processingDescription, elementReferenceNumber, authorisationToken);
        }

        /// <summary> Initializes a new instance of StatusCredentialsResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="elementReferenceNumber"></param>
        /// <returns> A new <see cref="Models.StatusCredentialsResponse"/> instance for mocking. </returns>
        public static StatusCredentialsResponse StatusCredentialsResponse(DateTimeOffset timestamp = default, string referenceNumber = null, int processingCode = default, string processingDescription = null, string elementReferenceNumber = null)
        {
            return new StatusCredentialsResponse(timestamp, referenceNumber, processingCode, processingDescription, elementReferenceNumber);
        }

        /// <summary> Initializes a new instance of SendInvoiceResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="elementReferenceNumber"></param>
        /// <returns> A new <see cref="Models.SendInvoiceResponse"/> instance for mocking. </returns>
        public static SendInvoiceResponse SendInvoiceResponse(DateTimeOffset timestamp = default, string referenceNumber = null, int processingCode = default, string processingDescription = null, string elementReferenceNumber = null)
        {
            return new SendInvoiceResponse(timestamp, referenceNumber, processingCode, processingDescription, elementReferenceNumber);
        }

        /// <summary> Initializes a new instance of StatusInvoiceResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="elementReferenceNumber"></param>
        /// <param name="invoiceStatus"></param>
        /// <returns> A new <see cref="Models.StatusInvoiceResponse"/> instance for mocking. </returns>
        public static StatusInvoiceResponse StatusInvoiceResponse(DateTimeOffset timestamp = default, string referenceNumber = null, int processingCode = default, string processingDescription = null, string elementReferenceNumber = null, InvoiceStatusType invoiceStatus = null)
        {
            return new StatusInvoiceResponse(timestamp, referenceNumber, processingCode, processingDescription, elementReferenceNumber, invoiceStatus);
        }

        /// <summary> Initializes a new instance of InvoiceStatusType. </summary>
        /// <param name="invoiceNumber"></param>
        /// <param name="ksefReferenceNumber"></param>
        /// <param name="acquisitionTimestamp"></param>
        /// <returns> A new <see cref="Models.InvoiceStatusType"/> instance for mocking. </returns>
        public static InvoiceStatusType InvoiceStatusType(string invoiceNumber = null, string ksefReferenceNumber = null, DateTimeOffset? acquisitionTimestamp = null)
        {
            return new InvoiceStatusType(invoiceNumber, ksefReferenceNumber, acquisitionTimestamp);
        }

        /// <summary> Initializes a new instance of GetPaymentIdentifierReferenceNumbersResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="ksefReferenceNumberList"></param>
        /// <returns> A new <see cref="Models.GetPaymentIdentifierReferenceNumbersResponse"/> instance for mocking. </returns>
        public static GetPaymentIdentifierReferenceNumbersResponse GetPaymentIdentifierReferenceNumbersResponse(DateTimeOffset timestamp = default, string referenceNumber = null, IEnumerable<string> ksefReferenceNumberList = null)
        {
            ksefReferenceNumberList ??= new List<string>();

            return new GetPaymentIdentifierReferenceNumbersResponse(timestamp, referenceNumber, ksefReferenceNumberList?.ToList());
        }

        /// <summary> Initializes a new instance of RequestPaymentIdentifierResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="paymentIdentifier"></param>
        /// <returns> A new <see cref="Models.RequestPaymentIdentifierResponse"/> instance for mocking. </returns>
        public static RequestPaymentIdentifierResponse RequestPaymentIdentifierResponse(DateTimeOffset timestamp = default, string referenceNumber = null, string paymentIdentifier = null)
        {
            return new RequestPaymentIdentifierResponse(timestamp, referenceNumber, paymentIdentifier);
        }

        /// <summary> Initializes a new instance of QuerySyncCredentialsResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="credentialsList"></param>
        /// <returns> A new <see cref="Models.QuerySyncCredentialsResponse"/> instance for mocking. </returns>
        public static QuerySyncCredentialsResponse QuerySyncCredentialsResponse(DateTimeOffset timestamp = default, string referenceNumber = null, IEnumerable<CredentialsBaseTypeObject> credentialsList = null)
        {
            credentialsList ??= new List<CredentialsBaseTypeObject>();

            return new QuerySyncCredentialsResponse(timestamp, referenceNumber, credentialsList?.ToList());
        }

        /// <summary> Initializes a new instance of CredentialsBaseTypeObject. </summary>
        /// <param name="identifier"> Any object. </param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="Models.CredentialsBaseTypeObject"/> instance for mocking. </returns>
        public static CredentialsBaseTypeObject CredentialsBaseTypeObject(object identifier = null, string type = null)
        {
            return new CredentialsBaseTypeObject(identifier, type);
        }

        /// <summary> Initializes a new instance of QueryInvoiceAsyncInitResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="elementReferenceNumber"></param>
        /// <returns> A new <see cref="Models.QueryInvoiceAsyncInitResponse"/> instance for mocking. </returns>
        public static QueryInvoiceAsyncInitResponse QueryInvoiceAsyncInitResponse(DateTimeOffset timestamp = default, string referenceNumber = null, int processingCode = default, string processingDescription = null, string elementReferenceNumber = null)
        {
            return new QueryInvoiceAsyncInitResponse(timestamp, referenceNumber, processingCode, processingDescription, elementReferenceNumber);
        }

        /// <summary> Initializes a new instance of QueryInvoiceAsyncStatusResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="elementReferenceNumber"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="numberOfElements"></param>
        /// <param name="divisionType"></param>
        /// <param name="partList"></param>
        /// <returns> A new <see cref="Models.QueryInvoiceAsyncStatusResponse"/> instance for mocking. </returns>
        public static QueryInvoiceAsyncStatusResponse QueryInvoiceAsyncStatusResponse(DateTimeOffset timestamp = default, string referenceNumber = null, int processingCode = default, string processingDescription = null, string elementReferenceNumber = null, int numberOfParts = default, long numberOfElements = default, QueryInvoiceAsyncStatusResponseDivisionType divisionType = default, IEnumerable<InvoiceDivisionPlainPartType> partList = null)
        {
            partList ??= new List<InvoiceDivisionPlainPartType>();

            return new QueryInvoiceAsyncStatusResponse(timestamp, referenceNumber, processingCode, processingDescription, elementReferenceNumber, numberOfParts, numberOfElements, divisionType, partList?.ToList());
        }

        /// <summary> Initializes a new instance of InvoiceDivisionPlainPartType. </summary>
        /// <param name="partReferenceNumber"></param>
        /// <param name="partName"></param>
        /// <param name="partNumber"></param>
        /// <param name="partRangeFrom"></param>
        /// <param name="partRangeTo"></param>
        /// <param name="partExpiration"></param>
        /// <param name="plainPartHash"></param>
        /// <returns> A new <see cref="Models.InvoiceDivisionPlainPartType"/> instance for mocking. </returns>
        public static InvoiceDivisionPlainPartType InvoiceDivisionPlainPartType(string partReferenceNumber = null, string partName = null, int partNumber = default, DateTimeOffset partRangeFrom = default, DateTimeOffset partRangeTo = default, DateTimeOffset partExpiration = default, FileUnlimitedHashType plainPartHash = null)
        {
            return new InvoiceDivisionPlainPartType(partReferenceNumber, partName, partNumber, partRangeFrom, partRangeTo, partExpiration, plainPartHash);
        }

        /// <summary> Initializes a new instance of FileUnlimitedHashType. </summary>
        /// <param name="hashSHA"></param>
        /// <param name="fileSize"></param>
        /// <returns> A new <see cref="Models.FileUnlimitedHashType"/> instance for mocking. </returns>
        public static FileUnlimitedHashType FileUnlimitedHashType(HashSHAType hashSHA = null, int fileSize = default)
        {
            return new FileUnlimitedHashType(hashSHA, fileSize);
        }

        /// <summary> Initializes a new instance of QueryInvoiceSyncResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="numberOfElements"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageOffset"></param>
        /// <param name="invoiceHeaderList"></param>
        /// <returns> A new <see cref="Models.QueryInvoiceSyncResponse"/> instance for mocking. </returns>
        public static QueryInvoiceSyncResponse QueryInvoiceSyncResponse(DateTimeOffset timestamp = default, string referenceNumber = null, long numberOfElements = default, int pageSize = default, int pageOffset = default, IEnumerable<InvoiceHeaderType> invoiceHeaderList = null)
        {
            invoiceHeaderList ??= new List<InvoiceHeaderType>();

            return new QueryInvoiceSyncResponse(timestamp, referenceNumber, numberOfElements, pageSize, pageOffset, invoiceHeaderList?.ToList());
        }

        /// <summary> Initializes a new instance of InvoiceHeaderType. </summary>
        /// <param name="invoiceReferenceNumber"></param>
        /// <param name="ksefReferenceNumber"></param>
        /// <param name="invoiceHash"></param>
        /// <param name="invoicingDate"></param>
        /// <param name="acquisitionTimestamp"></param>
        /// <param name="subjectBy"></param>
        /// <param name="subjectByK"></param>
        /// <param name="subjectTo"></param>
        /// <param name="subjectToKList"></param>
        /// <param name="subjectsOtherList"></param>
        /// <param name="subjectsAuthorizedList"></param>
        /// <param name="net"></param>
        /// <param name="vat"></param>
        /// <param name="gross"></param>
        /// <returns> A new <see cref="Models.InvoiceHeaderType"/> instance for mocking. </returns>
        public static InvoiceHeaderType InvoiceHeaderType(string invoiceReferenceNumber = null, string ksefReferenceNumber = null, FileUnlimitedHashType invoiceHash = null, DateTimeOffset invoicingDate = default, DateTimeOffset acquisitionTimestamp = default, SubjectByType subjectBy = null, SubjectByType subjectByK = null, SubjectToType subjectTo = null, IEnumerable<SubjectToType> subjectToKList = null, IEnumerable<SubjectOtherType> subjectsOtherList = null, IEnumerable<SubjectAuthorizedType> subjectsAuthorizedList = null, string net = null, string vat = null, string gross = null)
        {
            subjectToKList ??= new List<SubjectToType>();
            subjectsOtherList ??= new List<SubjectOtherType>();
            subjectsAuthorizedList ??= new List<SubjectAuthorizedType>();

            return new InvoiceHeaderType(invoiceReferenceNumber, ksefReferenceNumber, invoiceHash, invoicingDate, acquisitionTimestamp, subjectBy, subjectByK, subjectTo, subjectToKList?.ToList(), subjectsOtherList?.ToList(), subjectsAuthorizedList?.ToList(), net, vat, gross);
        }

        /// <summary> Initializes a new instance of SubjectOtherType. </summary>
        /// <param name="issuedToIdentifier"></param>
        /// <param name="issuedToName"></param>
        /// <param name="subjectOtherTypeValue"></param>
        /// <returns> A new <see cref="Models.SubjectOtherType"/> instance for mocking. </returns>
        public static SubjectOtherType SubjectOtherType(SubjectIdentifierToType issuedToIdentifier = null, SubjectNameType issuedToName = null, SubjectOtherTypeSubjectOtherType subjectOtherTypeValue = default)
        {
            return new SubjectOtherType(issuedToIdentifier, issuedToName, subjectOtherTypeValue);
        }

        /// <summary> Initializes a new instance of SubjectAuthorizedType. </summary>
        /// <param name="issuedToIdentifier"></param>
        /// <param name="issuedToName"></param>
        /// <param name="subjectAuthorizedTypeValue"></param>
        /// <returns> A new <see cref="Models.SubjectAuthorizedType"/> instance for mocking. </returns>
        public static SubjectAuthorizedType SubjectAuthorizedType(SubjectIdentifierToType issuedToIdentifier = null, SubjectNameType issuedToName = null, SubjectAuthorizedTypeSubjectAuthorizedType subjectAuthorizedTypeValue = default)
        {
            return new SubjectAuthorizedType(issuedToIdentifier, issuedToName, subjectAuthorizedTypeValue);
        }

        /// <summary> Initializes a new instance of AuthorisationChallengeResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="challenge"></param>
        /// <returns> A new <see cref="Models.AuthorisationChallengeResponse"/> instance for mocking. </returns>
        public static AuthorisationChallengeResponse AuthorisationChallengeResponse(DateTimeOffset timestamp = default, string challenge = null)
        {
            return new AuthorisationChallengeResponse(timestamp, challenge);
        }

        /// <summary> Initializes a new instance of InitSessionResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="sessionToken"></param>
        /// <returns> A new <see cref="Models.InitSessionResponse"/> instance for mocking. </returns>
        public static InitSessionResponse InitSessionResponse(DateTimeOffset timestamp = default, string referenceNumber = null, InitialisedSessionType sessionToken = null)
        {
            return new InitSessionResponse(timestamp, referenceNumber, sessionToken);
        }

        /// <summary> Initializes a new instance of InitialisedSessionType. </summary>
        /// <param name="token"></param>
        /// <param name="context"></param>
        /// <returns> A new <see cref="Models.InitialisedSessionType"/> instance for mocking. </returns>
        public static InitialisedSessionType InitialisedSessionType(string token = null, SessionContextType context = null)
        {
            return new InitialisedSessionType(token, context);
        }

        /// <summary> Initializes a new instance of SessionContextType. </summary>
        /// <param name="contextIdentifier"></param>
        /// <param name="contextName"></param>
        /// <param name="credentialsRoleList"></param>
        /// <returns> A new <see cref="Models.SessionContextType"/> instance for mocking. </returns>
        public static SessionContextType SessionContextType(SubjectIdentifierByType contextIdentifier = null, SubjectNameType contextName = null, IEnumerable<CredentialsRoleResponseBaseTypeObject> credentialsRoleList = null)
        {
            credentialsRoleList ??= new List<CredentialsRoleResponseBaseTypeObject>();

            return new SessionContextType(contextIdentifier, contextName, credentialsRoleList?.ToList());
        }

        /// <summary> Initializes a new instance of CredentialsRoleResponseBaseTypeObject. </summary>
        /// <param name="roleType"> Any object. </param>
        /// <param name="roleDescription"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="Models.CredentialsRoleResponseBaseTypeObject"/> instance for mocking. </returns>
        public static CredentialsRoleResponseBaseTypeObject CredentialsRoleResponseBaseTypeObject(object roleType = null, string roleDescription = null, string type = null)
        {
            return new CredentialsRoleResponseBaseTypeObject(roleType, roleDescription, type);
        }

        /// <summary> Initializes a new instance of SessionStatusResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="numberOfElements"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageOffset"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="invoiceStatusList"></param>
        /// <returns> A new <see cref="Models.SessionStatusResponse"/> instance for mocking. </returns>
        public static SessionStatusResponse SessionStatusResponse(DateTimeOffset timestamp = default, string referenceNumber = null, long numberOfElements = default, int pageSize = default, int pageOffset = default, int processingCode = default, string processingDescription = null, IEnumerable<SessionInvoiceStatusType> invoiceStatusList = null)
        {
            invoiceStatusList ??= new List<SessionInvoiceStatusType>();

            return new SessionStatusResponse(timestamp, referenceNumber, numberOfElements, pageSize, pageOffset, processingCode, processingDescription, invoiceStatusList?.ToList());
        }

        /// <summary> Initializes a new instance of SessionInvoiceStatusType. </summary>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <param name="elementReferenceNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="ksefReferenceNumber"></param>
        /// <param name="acquisitionTimestamp"></param>
        /// <returns> A new <see cref="Models.SessionInvoiceStatusType"/> instance for mocking. </returns>
        public static SessionInvoiceStatusType SessionInvoiceStatusType(int processingCode = default, string processingDescription = null, string elementReferenceNumber = null, string invoiceNumber = null, string ksefReferenceNumber = null, DateTimeOffset? acquisitionTimestamp = null)
        {
            return new SessionInvoiceStatusType(processingCode, processingDescription, elementReferenceNumber, invoiceNumber, ksefReferenceNumber, acquisitionTimestamp);
        }

        /// <summary> Initializes a new instance of TerminateSessionResponse. </summary>
        /// <param name="timestamp"></param>
        /// <param name="referenceNumber"></param>
        /// <param name="processingCode"></param>
        /// <param name="processingDescription"></param>
        /// <returns> A new <see cref="Models.TerminateSessionResponse"/> instance for mocking. </returns>
        public static TerminateSessionResponse TerminateSessionResponse(DateTimeOffset timestamp = default, string referenceNumber = null, int processingCode = default, string processingDescription = null)
        {
            return new TerminateSessionResponse(timestamp, referenceNumber, processingCode, processingDescription);
        }

        /// <summary> Initializes a new instance of CredentialsIdentifierResponseType. </summary>
        /// <param name="identifier"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="Models.CredentialsIdentifierResponseType"/> instance for mocking. </returns>
        public static CredentialsIdentifierResponseType CredentialsIdentifierResponseType(string identifier = null, string type = null)
        {
            return new CredentialsIdentifierResponseType(identifier, type);
        }

        /// <summary> Initializes a new instance of CredentialsIdentifierResponseInstitutionalNipType. </summary>
        /// <param name="identifier"></param>
        /// <returns> A new <see cref="Models.CredentialsIdentifierResponseInstitutionalNipType"/> instance for mocking. </returns>
        public static CredentialsIdentifierResponseInstitutionalNipType CredentialsIdentifierResponseInstitutionalNipType(string identifier = null)
        {
            return new CredentialsIdentifierResponseInstitutionalNipType(identifier);
        }

        /// <summary> Initializes a new instance of CredentialsParentType. </summary>
        /// <param name="identifier"> Any object. </param>
        /// <param name="type"></param>
        /// <param name="credentialsRole"></param>
        /// <returns> A new <see cref="Models.CredentialsParentType"/> instance for mocking. </returns>
        public static CredentialsParentType CredentialsParentType(object identifier = null, string type = null, CredentialsRoleResponseStandardPlainType credentialsRole = null)
        {
            return new CredentialsParentType(identifier, type, credentialsRole);
        }

        /// <summary> Initializes a new instance of CredentialsPlainType. </summary>
        /// <param name="identifier"></param>
        /// <param name="credentialsRoleList"></param>
        /// <returns> A new <see cref="Models.CredentialsPlainType"/> instance for mocking. </returns>
        public static CredentialsPlainType CredentialsPlainType(CredentialsIdentifierResponseType identifier = null, IEnumerable<CredentialsRoleResponseStandardDetailsType> credentialsRoleList = null)
        {
            credentialsRoleList ??= new List<CredentialsRoleResponseStandardDetailsType>();

            return new CredentialsPlainType(identifier, credentialsRoleList?.ToList());
        }

        /// <summary> Initializes a new instance of CredentialsRoleResponseStandardDetailsType. </summary>
        /// <param name="roleType"> Any object. </param>
        /// <param name="roleDescription"></param>
        /// <param name="type"></param>
        /// <param name="credentialsAssignmentType"></param>
        /// <param name="roleAssigningAuthorIdentifier"></param>
        /// <returns> A new <see cref="Models.CredentialsRoleResponseStandardDetailsType"/> instance for mocking. </returns>
        public static CredentialsRoleResponseStandardDetailsType CredentialsRoleResponseStandardDetailsType(object roleType = null, string roleDescription = null, string type = null, CredentialsRoleResponseStandardDetailsTypeCredentialsAssignmentType? credentialsAssignmentType = null, CredentialsIdentifierResponseType roleAssigningAuthorIdentifier = null)
        {
            return new CredentialsRoleResponseStandardDetailsType(roleType, roleDescription, type, credentialsAssignmentType, roleAssigningAuthorIdentifier);
        }

        /// <summary> Initializes a new instance of CredentialsTokenType. </summary>
        /// <param name="identifier"> Any object. </param>
        /// <param name="type"></param>
        /// <param name="credentialsRoleList"></param>
        /// <param name="parent"></param>
        /// <param name="description"></param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="Models.CredentialsTokenType"/> instance for mocking. </returns>
        public static CredentialsTokenType CredentialsTokenType(object identifier = null, string type = null, IEnumerable<CredentialsRoleResponseTokenType> credentialsRoleList = null, CredentialsPlainType parent = null, string description = null, int? status = null)
        {
            credentialsRoleList ??= new List<CredentialsRoleResponseTokenType>();

            return new CredentialsTokenType(identifier, type, credentialsRoleList?.ToList(), parent, description, status);
        }

        /// <summary> Initializes a new instance of CredentialsRoleResponseGrantedForInstitutionType. </summary>
        /// <param name="roleType"> Any object. </param>
        /// <param name="roleDescription"></param>
        /// <param name="type"></param>
        /// <param name="roleGrantorIdentifier"></param>
        /// <returns> A new <see cref="Models.CredentialsRoleResponseGrantedForInstitutionType"/> instance for mocking. </returns>
        public static CredentialsRoleResponseGrantedForInstitutionType CredentialsRoleResponseGrantedForInstitutionType(object roleType = null, string roleDescription = null, string type = null, CredentialsIdentifierResponseInstitutionalNipType roleGrantorIdentifier = null)
        {
            return new CredentialsRoleResponseGrantedForInstitutionType(roleType, roleDescription, type, roleGrantorIdentifier);
        }
    }
}
